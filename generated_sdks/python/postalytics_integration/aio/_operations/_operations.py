# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.3, generator: @autorest/python@6.2.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ..._operations._operations import (
    build_postalytics_integration_create_account_request,
    build_postalytics_integration_create_contact_request,
    build_postalytics_integration_delete_account_request,
    build_postalytics_integration_delete_contact_request,
    build_postalytics_integration_get_account_by_id_request,
    build_postalytics_integration_get_all_contacts_request,
    build_postalytics_integration_get_contact_by_id_request,
    build_postalytics_integration_update_account_request,
    build_postalytics_integration_update_contact_request,
)
from .._vendor import PostalyticsIntegrationMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class PostalyticsIntegrationOperationsMixin(PostalyticsIntegrationMixinABC):
    @overload
    async def create_account(self, body: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Create Account.

        Create Account.

        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "first_name": "str",  # Required.
                    "last_name": "str",  # Required.
                    "password": "str",  # Required.
                    "username": "str",  # Required.
                    "address_city": "str",  # Optional.
                    "address_state": "str",  # Optional.
                    "address_street": "str",  # Optional.
                    "address_zip": "str",  # Optional.
                    "company": "str",  # Optional.
                    "email_address": "str",  # Optional.
                    "phone": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "account_id": "str",  # Optional.
                    "api_key": "str",  # Optional.
                    "created_date": "str"  # Optional.
                }
        """

    @overload
    async def create_account(self, body: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Create Account.

        Create Account.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "account_id": "str",  # Optional.
                    "api_key": "str",  # Optional.
                    "created_date": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def create_account(self, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Create Account.

        Create Account.

        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "account_id": "str",  # Optional.
                    "api_key": "str",  # Optional.
                    "created_date": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_postalytics_integration_create_account_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def get_account_by_id(self, account_id: int, **kwargs: Any) -> JSON:
        """Get Account.

        Get Account.

        :param account_id: ID of the account. Required.
        :type account_id: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "address_city": "str",  # Optional.
                    "address_state": "str",  # Optional.
                    "address_street": "str",  # Optional.
                    "address_zip": "str",  # Optional.
                    "api_key": "str",  # Optional.
                    "company": "str",  # Optional.
                    "created_date": "str",  # Optional.
                    "email_address": "str",  # Optional.
                    "first_name": "str",  # Optional.
                    "id": "str",  # Optional.
                    "last_name": "str",  # Optional.
                    "parent_id": "str",  # Optional.
                    "phone": "str",  # Optional.
                    "username": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_postalytics_integration_get_account_by_id_request(
            account_id=account_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def update_account(self, account_id: int, **kwargs: Any) -> JSON:
        """Update Account.

        Update Account.

        :param account_id: ID of the account. Required.
        :type account_id: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "account_id": "str",  # Optional.
                    "updated_date": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_postalytics_integration_update_account_request(
            account_id=account_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def delete_account(self, account_id: int, **kwargs: Any) -> JSON:
        """Delete Account.

        Delete Account.

        :param account_id: ID of the account. Required.
        :type account_id: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "account_id": "str",  # Optional.
                    "deleted_date": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_postalytics_integration_delete_account_request(
            account_id=account_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def get_all_contacts(self, **kwargs: Any) -> List[JSON]:
        """Get all contact lists.

        Get all contact lists.

        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "contact_list_id": "str",  # Optional.
                        "count": "str",  # Optional.
                        "created_date": "str",  # Optional.
                        "name": "str"  # Optional.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[JSON]]

        request = build_postalytics_integration_get_all_contacts_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @overload
    async def create_contact(self, body: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Add A Contact To Contact List.

        Add A Contact To Contact List.

        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "address_city": "str",  # Required.
                    "address_state": "str",  # Required.
                    "address_street": "str",  # Required.
                    "address_street2": "str",  # Required.
                    "address_zip": "str",  # Required.
                    "contact_list_id": 0,  # Required.
                    "first_name": "str",  # Required.
                    "last_name": "str",  # Required.
                    "company": "str",  # Optional.
                    "email_address": "str",  # Optional.
                    "phone": "str",  # Optional.
                    "var_field_1": "str",  # Optional.
                    "var_field_10": "str",  # Optional.
                    "var_field_2": "str",  # Optional.
                    "var_field_3": "str",  # Optional.
                    "var_field_4": "str",  # Optional.
                    "var_field_5": "str",  # Optional.
                    "var_field_6": "str",  # Optional.
                    "var_field_7": "str",  # Optional.
                    "var_field_8": "str",  # Optional.
                    "var_field_9": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "created_date": "str"  # Optional.
                }
        """

    @overload
    async def create_contact(self, body: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Add A Contact To Contact List.

        Add A Contact To Contact List.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "created_date": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def create_contact(self, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Add A Contact To Contact List.

        Add A Contact To Contact List.

        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "created_date": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_postalytics_integration_create_contact_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def get_contact_by_id(
        self, id: int, *, start: Optional[int] = None, limit: Optional[int] = None, **kwargs: Any
    ) -> List[JSON]:
        """Get All Contacts On A List.

        Get All Contacts On A List.

        :param id: ID of the account. Required.
        :type id: int
        :keyword start: The row to start getting records at. Default value is None.
        :paramtype start: int
        :keyword limit: The number of rows to retrieve. Value can be from 1 to 100. Default value is
         None.
        :paramtype limit: int
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "address_city": "str",  # Optional.
                        "address_state": "str",  # Optional.
                        "address_street": "str",  # Optional.
                        "address_street2": "str",  # Optional.
                        "address_zip": "str",  # Optional.
                        "company": "str",  # Optional.
                        "contact_id": "str",  # Optional.
                        "email_address": "str",  # Optional.
                        "first_name": "str",  # Optional.
                        "last_name": "str",  # Optional.
                        "phone": "str",  # Optional.
                        "row": "str",  # Optional.
                        "var_field_1": "str",  # Optional.
                        "var_field_10": "str",  # Optional.
                        "var_field_2": "str",  # Optional.
                        "var_field_3": "str",  # Optional.
                        "var_field_4": "str",  # Optional.
                        "var_field_5": "str",  # Optional.
                        "var_field_6": "str",  # Optional.
                        "var_field_7": "str",  # Optional.
                        "var_field_8": "str",  # Optional.
                        "var_field_9": "str"  # Optional.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[JSON]]

        request = build_postalytics_integration_get_contact_by_id_request(
            id=id,
            start=start,
            limit=limit,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @overload
    async def update_contact(
        self, id: int, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Update Contact.

        Update Contact.

        :param id: ID of the account. Required.
        :type id: int
        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "address_city": "str",  # Required.
                    "address_state": "str",  # Required.
                    "address_street": "str",  # Required.
                    "address_zip": "str",  # Required.
                    "contact_id": 0,  # Required.
                    "contact_list_id": 0,  # Required.
                    "first_name": "str",  # Required.
                    "last_name": "str",  # Required.
                    "address_street2": "str",  # Optional.
                    "company": "str",  # Optional.
                    "email_address": "str",  # Optional.
                    "phone": "str",  # Optional.
                    "var_field_1": "str",  # Optional.
                    "var_field_10": "str",  # Optional.
                    "var_field_2": "str",  # Optional.
                    "var_field_3": "str",  # Optional.
                    "var_field_4": "str",  # Optional.
                    "var_field_5": "str",  # Optional.
                    "var_field_6": "str",  # Optional.
                    "var_field_7": "str",  # Optional.
                    "var_field_8": "str",  # Optional.
                    "var_field_9": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "updated_date": "str"  # Optional.
                }
        """

    @overload
    async def update_contact(self, id: int, body: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Update Contact.

        Update Contact.

        :param id: ID of the account. Required.
        :type id: int
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "updated_date": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def update_contact(self, id: int, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Update Contact.

        Update Contact.

        :param id: ID of the account. Required.
        :type id: int
        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "updated_date": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_postalytics_integration_update_contact_request(
            id=id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def delete_contact(self, id: int, **kwargs: Any) -> JSON:
        """Delete Contact.

        Delete Contact.

        :param id: ID of the account. Required.
        :type id: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "deleted_date": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_postalytics_integration_delete_contact_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)
